# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries
# SPDX-License-Identifier: MIT

"""
This test will initialize the display using displayio and draw a solid white
background, a smaller black rectangle, and some white text.
"""

import time
import board
import displayio
import terminalio
import random
from adafruit_display_text import label
import adafruit_displayio_ssd1306
from digitalio import DigitalInOut, Direction, Pull

# initialize buttons
btn_a = DigitalInOut(board.D9)
btn_b = DigitalInOut(board.D6)
btn_c = DigitalInOut(board.D5)

btn_a.direction = Direction.INPUT
btn_b.direction = Direction.INPUT
btn_c.direction = Direction.INPUT

btn_a.pull = Pull.UP
btn_b.pull = Pull.UP
btn_c.pull = Pull.UP

displayio.release_displays()

oled_reset = board.D12

# Use for I2C
i2c = board.I2C()  # uses board.SCL and board.SDA
# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller
display_bus = displayio.I2CDisplay(i2c, device_address=0x3C, reset=oled_reset)

# Use for SPI
# spi = board.SPI()
# oled_cs = board.D5
# oled_dc = board.D6
# display_bus = displayio.FourWire(spi, command=oled_dc, chip_select=oled_cs,
#                                 reset=oled_reset, baudrate=1000000)

WIDTH = 128
HEIGHT = 32  # Change to 64 if needed
BORDER = 5

display = adafruit_displayio_ssd1306.SSD1306(display_bus, width=WIDTH, height=HEIGHT)

splash = displayio.Group()
bitmap = displayio.Bitmap(WIDTH, HEIGHT, 2)
palette = displayio.Palette(2)
palette[0] = 0xFFFFFF
palette[1] = 0x000000

bitmap.fill(1)
tile_grid = displayio.TileGrid(bitmap, pixel_shader=palette)
splash.append(tile_grid)
display.show(splash)

speed = 0.05

while True:
	curx = 0
	cury = 0

	bitmap.fill(1)
	tile_grid = displayio.TileGrid(bitmap, pixel_shader=palette)
	splash.append(tile_grid)

	oldx = curx
	oldy = cury

	# kitten
	kittenx = random.randrange(WIDTH)
	kitteny = random.randrange(HEIGHT)
	
	# nki
	nk0x = random.randrange(WIDTH)
	nk0y = random.randrange(HEIGHT)
	nk1x = random.randrange(WIDTH)
	nk1y = random.randrange(HEIGHT)
	nk2x = random.randrange(WIDTH)
	nk2y = random.randrange(HEIGHT)
	nk3x = random.randrange(WIDTH)
	nk3y = random.randrange(HEIGHT)

	# instructions
	for i in range(0, 2):
		bitmap[curx, cury] = 0
		time.sleep(0.5)
		bitmap[curx, cury] = 1
		time.sleep(0.25)
	
	bitmap[curx, cury] = 0
 	text = "this is you, robot"
	text_area = label.Label(terminalio.FONT, text=text, color=0xFFFFFF, x=0, y=15)
	splash.append(text_area)
	
	time.sleep(2)
	splash.pop()
	
	text = "find the kitten"
	text_area = label.Label(terminalio.FONT, text=text, color=0xFFFFFF, x=0, y=15)
	splash.append(text_area)
	
	time.sleep(2)
	splash.pop()
	

	bitmap[curx, cury] = 0

	bitmap[kittenx, kitteny] = 0
	bitmap[nk0x, nk0y] = 0
	bitmap[nk1x, nk1y] = 0
	bitmap[nk2x, nk2y] = 0
	bitmap[nk3x, nk3y] = 0

	while True:
		if not btn_a.value:
			curx = (curx + 1) % WIDTH
			if len(splash) > 2:
				splash.pop()
		if not btn_b.value:
			curx = (curx - 1)
			if curx < 0:
				curx = (WIDTH - 1)
			if len(splash) > 2:
				splash.pop()
		if not btn_c.value:
			cury = (cury + 1) % HEIGHT
			if len(splash) > 2:
				splash.pop()
		if (kittenx == curx) & (kitteny == cury):
			text = "robot found kitten!"
			text_area = label.Label(terminalio.FONT, text=text, color=0xFFFFFF, x=0, y=15)
			splash.append(text_area)
			time.sleep(2)
			splash.pop()
			break
		else:
			if (nk0x == curx) & (nk0y == cury):
				text = "a four leaf clover"
				text_area = label.Label(terminalio.FONT, text=text, color=0xFFFFFF, x=0, y=15)
				splash.append(text_area)
				time.sleep(0.25)
			if (nk1x == curx) & (nk1y == cury):
				text = "a rusty pail"
				text_area = label.Label(terminalio.FONT, text=text, color=0xFFFFFF, x=0, y=15)
				splash.append(text_area)
				time.sleep(0.25)
			if (nk2x == curx) & (nk2y == cury):
				text = "a small salamander"
				text_area = label.Label(terminalio.FONT, text=text, color=0xFFFFFF, x=0, y=15)
				splash.append(text_area)
				time.sleep(0.25)
			if (nk3x == curx) & (nk3y == cury):
				text = "a tiny bumble-bee"
				text_area = label.Label(terminalio.FONT, text=text, color=0xFFFFFF, x=0, y=15)
				splash.append(text_area)
				time.sleep(0.25)
				
			bitmap[oldx, oldy] = 1
			bitmap[curx, cury] = 0
			bitmap[nk0x, nk0y] = 0
			bitmap[nk1x, nk1y] = 0
			bitmap[nk2x, nk2y] = 0
			bitmap[nk3x, nk3y] = 0
			oldx = curx
			oldy = cury
		time.sleep(speed)
	
while True:
	pass
	
	
# while True:
#     for x in range(0, WIDTH):
#        for y in range(0, HEIGHT):
#            bitmap[x, y] = 1
#        time.sleep(0.005)
#
#    for x in reversed(range(0, WIDTH)):
#        for y in reversed(range(0, HEIGHT)):
#            bitmap[x, y] = 0
#        time.sleep(0.005)

# # Make the display context
# splash = displayio.Group()
# display.show(splash)
#
# color_bitmap = displayio.Bitmap(WIDTH, HEIGHT, 1)
# color_palette = displayio.Palette(1)
# color_palette[0] = 0xFFFFFF  # White
#
# bg_sprite = displayio.TileGrid(color_bitmap, pixel_shader=color_palette, x=0, y=0)
# splash.append(bg_sprite)
#
# # Draw a smaller inner rectangle
# inner_bitmap = displayio.Bitmap(WIDTH - BORDER * 2, HEIGHT - BORDER * 2, 1)
# inner_palette = displayio.Palette(1)
# inner_palette[0] = 0x000000  # Black
# inner_sprite = displayio.TileGrid(
#     inner_bitmap, pixel_shader=inner_palette, x=BORDER, y=BORDER
# )
# splash.append(inner_sprite)
#
# # Draw a label
# gtx = displayio.Group(scale = 1)
# text = "Hello World!"
# text_area = label.Label(
#     terminalio.FONT, text=text, color=0xFFFFFF, x=30, y=32 // 2 - 1
# )
# splash.append(text_area)
# display.show(splash)
#
# while True:
# 	pass